// App.jsx
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { Spin } from 'antd';

import MainPage from '../components/MainPage';
import AuthPage from '../components/AuthPage';
import Logout from '../components/Logout';
import { API } from '../src/config';
const App = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [checkingAuth, setCheckingAuth] = useState(true);

  useEffect(() => {
    const token         = localStorage.getItem('token');
    const usernameHash      = localStorage.getItem('usernameHash');
    const passwordHash  = localStorage.getItem('passwordHash');
    const identifier    = localStorage.getItem('identifier');

    console.log('üíæ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:', { token, usernameHash, passwordHash, identifier });

    const validate = async () => {
      if (token && usernameHash && passwordHash && identifier) {
        try {
          const res = await fetch(API.validateTokenURL, {
            headers: { Authorization: `Bearer ${token}` }
          });

          if (res.ok) {
            console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            setIsAuthenticated(true);
          } else {
            console.warn('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
            localStorage.clear();
            setIsAuthenticated(false);
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', err);
          setIsAuthenticated(false);
        }
      } else {
        console.warn('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ localStorage');
        setIsAuthenticated(false);
      }
      setCheckingAuth(false);
    };

    validate();
  }, []);

  if (checkingAuth) {
    return (
      <div className="spinner-wrapper">
        <Spin size="large" tip="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞..." />
      </div>
    );
  }

  return (
    <Router>
      <Routes>
        <Route
          path="/logout"
          element={<Logout setIsAuthenticated={setIsAuthenticated} />}
        />
        <Route
          path="*"
          element={
            isAuthenticated ? (
              <MainPage />
            ) : (
              <AuthPage onSuccess={() => setIsAuthenticated(true)} />
            )
          }
        />
      </Routes>
    </Router>
  );
};

export default App;