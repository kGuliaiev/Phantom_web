// src/socketManager.js
import { Input, Button, List, 
  message as antdMessage, Tooltip, 
  notification, Modal }                   from 'antd';
import { MailOutlined } from '@ant-design/icons';
import React, { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import { API } from './config';
// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .js ‚Äî —Ç–∞–∫ Vite –Ω–∞–π–¥—ë—Ç –≤–∞—à–∏ utils:
import {
  saveMessage,
  updateMessageStatusRecord,
  saveStatusHistory
} from '../utils/dbMessages.js';
import { cryptoManager } from '../crypto/CryptoManager';
import { getLocalContacts } from '../utils/contacts.js';

// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
const identifier = localStorage.getItem('identifier');


const TypewriterText = function TypewriterText(props) {
  const { text = '', speed = 100, style } = props;
  const [displayed, setDisplayed] = useState('');
  useEffect(() => {
    setDisplayed('');
    let idx = 0;
    const interval = setInterval(() => {
      if (idx < text.length) {
        setDisplayed(text.slice(0, idx + 1));
        idx++;
      } else {
        clearInterval(interval);
      }
    }, speed);
    return () => clearInterval(interval);
  }, [text, speed]);
  return React.createElement('span', { style }, displayed);
};

const showNewMessageNotification = (title, description = '') => {
  notification.open({
    message: React.createElement('span', { style: { fontSize: '14px' } }, title),
    description: React.createElement(TypewriterText, { text: description || '', speed: 50, style: { fontSize: '12px' } }),
    style: { width: 250 },
    icon: React.createElement(MailOutlined, { style: { color: '#1890ff', fontSize: 16 } }),
    duration: 4,
    className: 'fade-notification',
  });
};

class SocketManager {
  constructor() {
    this.socket = io(API.baseURL, { transports: ['websocket'] });
    this._bindCoreHandlers();
  }

  _bindCoreHandlers() {
   
  // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.socket.on('message', async (data) => {
      console.log('SocketManagers -> üîê Received message from server:', data);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
      await saveMessage({
        id:         data.messageId,
        senderId:   data.sender,
        receiverId: data.receiver,
        encrypted:  data.encrypted || data.encryptedContent,
        iv:         data.iv,
        timestamp:  data.timestamp || new Date().toISOString(),
        status:     'delivered'
      });

      // Decrypt with sender's public key and lookup nickname
      const contacts = await getLocalContacts();
      const contact = contacts.find(c => String(c.contactId) === String(data.sender));
      const senderName = contact?.nickname || data.sender;
      const senderIdentificator = contact?.identificator || data.sender;
      const senderPublicKey = contact?.publicKey;
      let senderText = '';
      try {
        if (senderPublicKey) {
          senderText = await cryptoManager.decryptMessage( data.encrypted || data.encryptedContent, senderPublicKey);
        } else {
          senderText = data.encrypted || data.encryptedContent;
        }
      } catch (err) {
        console.warn(`Decryption failed for message ${data.messageId}:`, err);
        senderText = data.encrypted || data.encryptedContent;
      }

      //antdMessage.info(`üì© ${data.timestamp} –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderName} (${senderIdentificator}): ${senderText}`);
      //console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${senderName} (${senderIdentificator}): ${senderText}`);
      showNewMessageNotification( `${senderName} (${senderIdentificator})`, senderText || '' );

      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ (delivered) —Å–µ—Ä–≤–µ—Ä—É
      this.socket.emit('messageAttributeChanged', {
        messageId: data.messageId,
        attribute: 'status',
        value: 'delivered',
        sender:    identifier
      });
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ 'messageAttributeChanged' (delivered) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${data.messageId}`);

      // –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
      const now = new Date().toISOString();
      await saveStatusHistory({ messageId: data.messageId, status: 'delivered', updatedAt: now });
      // –£–≤–µ–¥–æ–º–ª—è–µ–º UI
      window.dispatchEvent(new CustomEvent('messagesUpdated'));
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏: —É–≤–µ–¥–æ–º–ª—è–µ–º MainPage –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      this.emit('newMessage', data);
    });

    // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∞–ø–¥–µ–π—Ç —Å—Ç–∞—Ç—É—Å–∞
    this.socket.on('messageAttributeChanged', async ({ messageId, value, sender }) => {
      const now = new Date().toISOString();
      switch (value) {
        case 'sent':
        case 'delivered':
        case 'seen':
          await updateMessageStatusRecord(messageId, value, now);
          await saveStatusHistory({ messageId, status: value, updatedAt: now });
          window.dispatchEvent(new CustomEvent('messageStatusUpdated', {
            detail: { messageId, status: value }
          }));
         // console.log(`üì© –°—Ç–∞—Ç—É—Å ${value} –ø–æ–ª—É—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${messageId}`);
         // antdMessage.info(`üì©–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${value}`);
          break;
      }
    });
  }

  on(event, handler) {
    this.socket.on(event, handler);
  }

  off(event, handler) {
    this.socket.off(event, handler);
  }

  emit(event, payload) {
    this.socket.emit(event, payload);
  }
}

const socketManager = new SocketManager();
export default socketManager;