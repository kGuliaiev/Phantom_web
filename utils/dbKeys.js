// utils/dbKeys.js

import { DB_NAME, DB_VERSION, STORE_KEYS, STORE_MESSAGES, STORE_HISTORY} from '../src/config.js';

class KeyDBManager {

  async getDB() {
    if (!this.db) {
      this.db = await this.openDB();
    }
    return this.db;
  }

  async openDB() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(DB_NAME, DB_VERSION);
      request.onupgradeneeded = event => {
        const db = event.target.result;
        if (!db.objectStoreNames.contains(STORE_MESSAGES)) {
          db.createObjectStore(STORE_MESSAGES, { keyPath: 'id' });
        }
        if (!db.objectStoreNames.contains(STORE_HISTORY)) {
          db.createObjectStore(STORE_HISTORY, { autoIncrement: true });
        }
        if (!db.objectStoreNames.contains(STORE_KEYS)) {
          db.createObjectStore(STORE_KEYS, { keyPath: 'keyName' });
        }
      };


      request.onsuccess = () => {
        console.log(`[LOG] [${new Date().toISOString()}] [IP: unknown] –û—Ç–∫—Ä—ã—Ç–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${DB_NAME}`);
        resolve(request.result);
      };

      request.onerror = () => {
        console.error(`[ERROR] [${new Date().toISOString()}] [IP: unknown] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ë–î: ${request.error}`);
        reject(request.error);
      };
    });
  }

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏
  async loadEncryptedKey(keyName) {
    return new Promise(async (resolve, reject) => {
      const db = await this.getDB();
      const tx = db.transaction(STORE_KEYS, 'readonly');
      const store = tx.objectStore(STORE_KEYS);
      const request = store.get(keyName);
      request.onsuccess = () => {
           const result = request.result;
           if (!result) return resolve(null);
           try {
             resolve({
               iv: result.iv, // iv —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ Base64-—Å—Ç—Ä–æ–∫–∞
               cipher: result.cipher ? result.cipher : (result.encrypted || ''),
               salt: result.salt || null
             });
           } catch (err) {
             console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–ª—é—á–∞ '${keyName}':`, err);
             reject(err);
           }
         };
  
      request.onerror = (event) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ '${keyName}':`, event.target.error);
        reject(event.target.error);
      };
    });
  }

// ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π (–ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏)
async saveEncryptedKey(keyName, encryptedKey) {
    
  try {
    const db = await this.getDB();
    const transaction = db.transaction(STORE_KEYS, 'readwrite');
    const store = transaction.objectStore(STORE_KEYS);

    const entry = { keyName, ...encryptedKey }; // –∫–ª—é—á –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

    const request = store.put(entry);
    request.onsuccess = () => {
      console.log(`üì• –ö–ª—é—á '${keyName}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - '${encryptedKey}'`);
      
    };

    request.onerror = (e) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞ '${keyName}':`, e.target.error);
    };
  } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ saveEncryptedKey (catch):", error);
      throw error;
  }
}



// üóëÔ∏è –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏
async  deleteAllEncryptedKeys() {
  try {
    const db = await this.getDB();
    const tx = db.transaction(STORE_KEYS, 'readwrite');
    await tx.objectStore(STORE_KEYS).clear();
    console.log('üóëÔ∏è –í—Å–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π:', error);
  }
}

}

const keyDBInstance = new KeyDBManager();
export { keyDBInstance as KeyDBManager };

export const saveEncryptedKey   = keyDBInstance.saveEncryptedKey.bind(keyDBInstance);
export const loadEncryptedKey   = keyDBInstance.loadEncryptedKey.bind(keyDBInstance);
export const saveKeyToIndexedDB = keyDBInstance.saveEncryptedKey.bind(keyDBInstance);