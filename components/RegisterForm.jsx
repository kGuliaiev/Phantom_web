// –§–∞–π–ª: src/components/RegisterForm.jsx
import React, { useState } from 'react';
import { CryptoManager } from '../src/crypto/CryptoManager';

const RegisterForm = ({ onSuccess }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleRegister = async () => {
    if (password !== confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const crypto = new CryptoManager();
      const identityKeyPair = await crypto.generateIdentityKeyPair();
      const signedPreKey = await crypto.generateSignedPreKey(identityKeyPair.privateKey);
      const oneTimePreKeys = await crypto.generateOneTimePreKeys(5);
      const hashedPassword = await crypto.hashPassword(password);

      const identifier = localStorage.getItem('phantom_identifier');
      if (!identifier) throw new Error('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');

      const payload = {
        login: username,
        password: hashedPassword,
        identifier,
        publicKey: identityKeyPair.publicKey,
        identityKey: identityKeyPair.publicKey,
        signedPreKey,
        oneTimePreKeys
      }

console.log("üöÄ Payload –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", payload);

function validateRegisterPayload(payload) {
  const requiredFields = ['login', 'passwordHash', 'identifier', 'identityKey', 'signedPreKey', 'oneTimePreKeys'];
  for (const field of requiredFields) {
    if (!payload[field]) {
      console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: ${field}`);
      return false;
    }
  }

  if (typeof payload.signedPreKey !== 'object') {
    console.error("‚ùå signedPreKey –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º");
    return false;
  }

  const spk = payload.signedPreKey;
  const spkFields = ['keyId', 'publicKey', 'privateKey', 'signature', 'createdAt'];
  for (const field of spkFields) {
    if (!spk[field] || (typeof spk[field] !== 'string' && field !== 'keyId' && field !== 'createdAt')) {
      console.error(`‚ùå –ü–æ–ª–µ signedPreKey.${field} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      return false;
    }
  }

  if (!Array.isArray(payload.oneTimePreKeys) || payload.oneTimePreKeys.length === 0) {
    console.error("‚ùå oneTimePreKeys –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º");
    return false;
  }

  for (const [i, otp] of payload.oneTimePreKeys.entries()) {
    const otpFields = ['keyId', 'publicKey', 'privateKey', 'createdAt'];
    for (const field of otpFields) {
      if (!otp[field]) {
        console.error(`‚ùå –ö–ª—é—á oneTimePreKeys[${i}] –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ ${field}`);
        return false;
      }
    }
  }

  return true;
}

if (!validateRegisterPayload(payload)) {
  console.error("‚õî Payload –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞");
  return;
}
;

      const res = await fetch('http://localhost:5001/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await res.json();

      if (res.ok) {
        await crypto.storePrivateKey(identityKeyPair.privateKey, hashedPassword);
        localStorage.setItem('phantom_username', username);
        onSuccess();
      } else {
        setError(result.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
      setError(err.message || '–û—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="register-form">
      <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
      <input
        type="text"
        placeholder="–õ–æ–≥–∏–Ω"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
      />
      <input
        type="password"
        placeholder="–ü–∞—Ä–æ–ª—å"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <input
        type="password"
        placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
        value={confirmPassword}
        onChange={(e) => setConfirmPassword(e.target.value)}
      />
      <button onClick={handleRegister} disabled={loading}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
      {error && <p style={{ color: 'red' }}>{error}</p>}
    </div>
  );
};

export default RegisterForm;
