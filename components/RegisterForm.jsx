// // App.jsx
// import React, { useState } from 'react';
// import { Tabs, Form, Input, Button, Typography, message } from 'antd';
// import { API } from '../src/config';
// import { CryptoManager } from '../crypto/CryptoManager';
// import ChatList from './ChatList';
// import './App.css';

// const { Title } = Typography;
// const { TabPane } = Tabs;

// function App() {
//   const [identifier, setIdentifier] = useState('');
//   const [isAuthenticated, setIsAuthenticated] = useState(false);
//   const [loginForm] = Form.useForm();
//   const [registerForm] = Form.useForm();

//   const generateIdentifier = async () => {
//     try {
//       const res = await fetch(API.generateIdentifierURL);
//       const data = await res.json();
//       setIdentifier(data.identifier);
//       console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—É—á–µ–Ω:', data.identifier);
//     } catch (error) {
//       console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:', error);
//       message.error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
//     }
//   };

//   const handleRegister = async (values) => {
//     const { username, password, confirm } = values;
//     if (!identifier) return message.error('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä');
//     if (password !== confirm) return message.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');

//     try {
//       const crypto = new CryptoManager();
//       const passwordHash = await crypto.hashPassword(password);

//       // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
//       await crypto.generateIdentityKeyPair();
//       await crypto.generateSignedPreKey();
//       await crypto.generateOneTimePreKeys(5);

//       const payload = {
//         username,
//         password: passwordHash,
//         identifier,
//         identityKey: crypto.keys.identityKey.publicKey,
//         publicKey: crypto.keys.identityKey.publicKey,
//         signedPreKey: {
//           keyId: crypto.keys.signedPreKey.keyId,
//           publicKey: crypto.keys.signedPreKey.publicKey,
//           signature: crypto.keys.signedPreKey.signature,
//           createdAt: crypto.keys.signedPreKey.createdAt,
//         },
//         oneTimePreKeys: crypto.keys.oneTimePreKeys.map(key => ({
//           keyId: key.keyId,
//           publicKey: key.publicKey,
//           createdAt: key.createdAt
//         }))
//       };

//       console.log('üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', payload);

//       const res = await fetch(API.registerUserURL, {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify(payload),
//       });

//       if (res.ok) {
//         console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
//         localStorage.setItem('phantom_id—ãentifier', identifier);
//         await crypto.savePrivateData(password);
//         message.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
//         setIsAuthenticated(true);
//       } else if (res.status === 409) {
//         message.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
//       } else {
//         const data = await res.json();
//         message.error(`–û—à–∏–±–∫–∞: ${data.message}`);
//       }

//     } catch (error) {
//       console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
//       message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
//     }
//   };

//   const handleLogin = async (values) => {
//     const { username, password } = values;

//     try {
//       const crypto = new CryptoManager();
//       const passwordHash = await crypto.hashPassword(password);

//       const res = await fetch(API.validateUserURL, {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify({ username, password: passwordHash }),
//       });

//       const data = await res.json();
//       if (res.ok) {
//         console.log('üîì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏...');
//         await crypto.loadPrivateData(password);
//         localStorage.setItem('phantom_identifier', data.identifier);
//         setIsAuthenticated(true);
//         message.success('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
//       } else {
//         message.error(`–û—à–∏–±–∫–∞: ${data.message}`);
//       }
//     } catch (err) {
//       console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
//       message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞');
//     }
//   };

//   if (isAuthenticated) return <ChatList />;

//   return (
//     <div className="auth-page">
//       <div className="auth-container">
//         <div style={{ textAlign: 'center', marginBottom: '1rem' }}>
//           <Title level={2}>üîê Phantom</Title>
//         </div>
//         <Tabs defaultActiveKey="login" centered onChange={key => key === 'register' && generateIdentifier()}>
//           <TabPane tab="–í–æ–π—Ç–∏" key="login">
//             <Form form={loginForm} onFinish={handleLogin} layout="vertical">
//               <Form.Item name="username" label="–õ–æ–≥–∏–Ω" rules={[{ required: true }]}>
//                 <Input />
//               </Form.Item>
//               <Form.Item name="password" label="–ü–∞—Ä–æ–ª—å" rules={[{ required: true }]}>
//                 <Input.Password />
//               </Form.Item>
//               <Form.Item>
//                 <Button type="primary" htmlType="submit" block>
//                   –í–æ–π—Ç–∏
//                 </Button>
//               </Form.Item>
//             </Form>
//           </TabPane>

//           <TabPane tab="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" key="register">
//             <div className="identifier-box">
//               ID: <strong>{identifier || '‚Äî'}</strong>
//               <Button onClick={generateIdentifier} size="small" style={{ marginLeft: '10px' }}>
//                 üîÅ –û–±–Ω–æ–≤–∏—Ç—å ID
//               </Button>
//             </div>
//             <Form form={registerForm} onFinish={handleRegister} layout="vertical">
//               <Form.Item name="username" label="–õ–æ–≥–∏–Ω" rules={[{ required: true }]}>
//                 <Input />
//               </Form.Item>
//               <Form.Item name="password" label="–ü–∞—Ä–æ–ª—å" rules={[{ required: true }]}>
//                 <Input.Password />
//               </Form.Item>
//               <Form.Item
//                 name="confirm"
//                 label="–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è"
//                 dependencies={['password']}
//                 rules={[
//                   { required: true },
//                   ({ getFieldValue }) => ({
//                     validator(_, value) {
//                       return value === getFieldValue('password')
//                         ? Promise.resolve()
//                         : Promise.reject(new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'));
//                     }
//                   }),
//                 ]}
//               >
//                 <Input.Password />
//               </Form.Item>
//               <Form.Item>
//                 <Button type="primary" htmlType="submit" block>
//                   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
//                 </Button>
//               </Form.Item>
//             </Form>
//           </TabPane>
//         </Tabs>
//       </div>
//     </div>
//   );
// }

// export default App;