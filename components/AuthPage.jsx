import React, { useState } from 'react';
import { Tabs, Form, Input, Button, Typography, message } from 'antd';
import { API } from '../src/config';
import { CryptoManager } from '../crypto/CryptoManager';

import MainPage from './MainPage';
// import ChatList from './ChatList';
import '../src/App.css';


const { Title } = Typography;
const { TabPane } = Tabs;

const AuthPage = ({ onSuccess }) => {
  const [identifier, setIdentifier] = useState('');
  const [registerForm] = Form.useForm();
  const [loginForm] = Form.useForm();
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const generateIdentifier = async () => {
    try {
      const res = await fetch(API.generateIdentifierURL);
      const data = await res.json();
      setIdentifier(data.identifier);
      console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—É—á–µ–Ω:', data.identifier);
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:', error);
      message.error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };

  const handleRegister = async (values) => {
    const { username, password, confirm } = values;
    if (!identifier) return message.error('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä');
    if (password !== confirm) return message.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');

    try {
      const crypto = new CryptoManager();
      const usernameHash = await crypto.hashPassword(username);
      const passwordHash = await crypto.hashPassword(password);

      const identityKey = await crypto.generateIdentityKeyPair();
      const signedPreKey = await crypto.generateSignedPreKey(identityKey.privateKey);
      const oneTimePreKeys = await crypto.generateOneTimePreKeys(5);

      const payload = {
        username: usernameHash,
        password: passwordHash,
        identifier,
        identityKey: identityKey.publicKey,
        publicKey: identityKey.publicKey,
        signedPreKey,
        oneTimePreKeys: oneTimePreKeys.map(k => ({
          keyId: k.keyId,
          publicKey: k.publicKey,
          createdAt: k.createdAt
        }))
      };

      console.log('üì¶ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', payload);

      const res = await fetch(API.registerURL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (res.ok) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        
        const passwordHash = await crypto.deriveCredentialsHash(username, password);

       // üîê –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ —à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –≤ IndexedDB
       if (identityKey?.privateKey) {
         await crypto.storePrivateKey(identityKey.privateKey, passwordHash);
       }
       if (signedPreKey?.privateKey) {
         await crypto.storePrivateKey(signedPreKey.privateKey, passwordHash);
       }
       for (const preKey of oneTimePreKeys) {
         if (preKey?.privateKey) {
           await crypto.storePrivateKey(preKey.privateKey, passwordHash);
         }
       }
        message.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
        setIsAuthenticated(true);
      } else if (res.status === 409) {
        message.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        const data = await res.json();
        message.error(`–û—à–∏–±–∫–∞: ${data.message}`);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  };

  const handleLogin = async (values) => {
    const { username, password } = values;
    try {
      const crypto = new CryptoManager();
      const usernameHash = await crypto.hashPassword(username);
      const passwordHash = await crypto.hashPassword(password);

      const res = await fetch(API.loginURL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username: usernameHash, password: passwordHash })
      });

      if (res.ok) {
        const data = await res.json();

        message.success('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
        localStorage.setItem('identifier', data.identifier);
        const passwordHash = await crypto.deriveCredentialsHash(username, password);
        const privateKey = await crypto.loadPrivateKey(passwordHash);
        if (!privateKey) {
          message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å.');
          return;
        }

        setIsAuthenticated(true);
        
      } else {
        const data = await res.json();
        message.error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${data.message}`);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞');
    }
  };


  if (isAuthenticated) return <MainPage />;

  return (
    <div className="auth-page">
      <div className="auth-container">
        <div style={{ textAlign: 'center', marginBottom: '1rem' }}>
          <Title level={2}>üîê Phantom</Title>
        </div>
        <Tabs defaultActiveKey="login" centered onChange={(key) => key === 'register' && generateIdentifier()}>
          <Tabs.TabPane tab="–í–æ–π—Ç–∏" key="login">
            <Form form={loginForm} onFinish={handleLogin} layout="vertical">
              <Form.Item name="username" label="–õ–æ–≥–∏–Ω" rules={[{ required: true }]}>
                <Input />
              </Form.Item>
              <Form.Item name="password" label="–ü–∞—Ä–æ–ª—å" rules={[{ required: true }]}>
                <Input.Password />
              </Form.Item>
              <Form.Item>
                <Button type="primary" htmlType="submit" block>
                  –í–æ–π—Ç–∏
                </Button>
              </Form.Item>
            </Form>
          </Tabs.TabPane>

          <Tabs.TabPane tab="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" key="register">
            <div className="identifier-box">
              ID: <strong>{identifier || '‚Äî'}</strong>
              <Button onClick={generateIdentifier} size="small" style={{ marginLeft: '10px' }}>
                üîÅ –û–±–Ω–æ–≤–∏—Ç—å ID
              </Button>
            </div>
            <Form form={registerForm} onFinish={handleRegister} layout="vertical">
              <Form.Item name="username" label="–õ–æ–≥–∏–Ω" rules={[{ required: true }]}>
                <Input />
              </Form.Item>
              <Form.Item name="password" label="–ü–∞—Ä–æ–ª—å" rules={[{ required: true }]}>
                <Input.Password />
              </Form.Item>
              <Form.Item name="confirm" label="–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è" dependencies={['password']} rules={[
                { required: true },
                ({ getFieldValue }) => ({
                  validator(_, value) {
                    return value === getFieldValue('password')
                      ? Promise.resolve()
                      : Promise.reject(new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'));
                  }
                })
              ]}>
                <Input.Password />
              </Form.Item>
              <Form.Item>
                <Button type="primary" htmlType="submit" block>
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </Button>
              </Form.Item>
            </Form>
          </Tabs.TabPane>
        </Tabs>
      </div>
    </div>
  );
};

export default AuthPage;