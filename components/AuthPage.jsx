import React, { useEffect, useState } from 'react';
import { Tabs, Form, Input, Button, Typography, message } from 'antd';
import { API } from '../src/config';
import { CryptoManager } from '../crypto/CryptoManager';
import MainPage from './MainPage';
import '../src/App.css';

const { Title } = Typography;

const AuthPage = ({ onSuccess = () => {} }) => {
  const [identifier, setIdentifier]           = useState('');
  const [registerForm]                        = Form.useForm();
  const [loginForm]                           = Form.useForm();
  const [isAuthenticated, setIsAuthenticated] = useState(false);



  const generateIdentifier = async () => {
    try {
      const res = await fetch(API.generateIdentifierURL);
      const data = await res.json();
      setIdentifier(data.identifier);
      console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—É—á–µ–Ω:', data.identifier);
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:', error);
      message.error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  };


  // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
  const handleRegister = async (values) => {
    const { username, password, confirm, nickname } = values;
    if (!identifier) return message.error('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä');
    if (password !== confirm) return message.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');

    try {
      const crypto = new CryptoManager();

      const usernameHash = await crypto.hashPassword(username);
      const passwordHash = await crypto.hashPassword(password);
      const credHash = await crypto.deriveCredentialsHash(username, password);
      
      const identityKey = await crypto.generateIdentityKeyPair();
      const signedPreKey = await crypto.generateSignedPreKey(identityKey.privateKey);
      const oneTimePreKeys = await crypto.generateOneTimePreKeys(5);

      const payload = {
        username: usernameHash,
        password: passwordHash,
        identifier,
        nickname,
        identityKey: identityKey.publicKey,
        publicKey: identityKey.publicKey,
        signedPreKey,
        oneTimePreKeys: oneTimePreKeys.map(k => ({
          keyId: k.keyId,
          publicKey: k.publicKey,
          createdAt: k.createdAt
        }))
      };

      const res = await fetch(API.registerURL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const data = await res.json();

      if (res.ok) {
        
        localStorage.setItem('usernameHash', usernameHash);
        localStorage.setItem('passwordHash', passwordHash);
        localStorage.setItem('credHash', credHash);

        localStorage.setItem('identifier', data.identifier);
        localStorage.setItem('token', data.token);
        localStorage.setItem('userid', data.userId);
        localStorage.setItem('nickname', data.nickname);
        
        await crypto.storePrivateKey(identityKey.privateKey, credHash);
        await crypto.storePrivateKey(signedPreKey.privateKey, credHash);
        for (const preKey of oneTimePreKeys) {
          await crypto.storePrivateKey(preKey.privateKey, credHash);
        }

        message.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
        setIsAuthenticated(true);
      } else {
        const data = await res.json();
        message.error(`–û—à–∏–±–∫–∞: ${data.message}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  };

  // –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø  
  const handleLogin = async (values) => {
    const { username, password } = values;
    try {
      const crypto = new CryptoManager();
      const usernameHash = await crypto.hashPassword(username);
      const passwordHash = await crypto.hashPassword(password);
      const credHash = await crypto.deriveCredentialsHash(username, password);
      
      
      
      const res = await fetch(API.loginURL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username: usernameHash, password: passwordHash })
      });

      const data = await res.json();

      if (res.ok) {
        

        
        localStorage.setItem('usernameHash',  usernameHash);
        localStorage.setItem('passwordHash',  passwordHash);
        localStorage.setItem('credHash',      credHash);
        
        localStorage.setItem('identifier',    data.identifier);
        localStorage.setItem('token',         data.token);
        localStorage.setItem('userid',        data.userId);
        localStorage.setItem('nickname',      data.nickname);
        
        const privateKey = await crypto.loadPrivateKey(credHash);
        if (!privateKey) {
          message.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å.');
          return;
        }

        setIsAuthenticated(true);
      } else {
        const data = await res.json();
        message.error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${data.message}`);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞');
    }
  };

  if (isAuthenticated) return <MainPage onLogout={() => {
    localStorage.clear(); // —É–¥–∞–ª—è–µ—Ç –≤—Å—ë
    window.location.reload(); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setIsAuthenticated(false);
  }} />;



  return (
    <div className="auth-page">
      <div className="auth-container">
        <div style={{ textAlign: 'center', marginBottom: '1rem' }}>
          <Title level={2}>üîê Phantom</Title>
        </div>
        <Tabs
          defaultActiveKey="login"
          centered
          onChange={(key) => key === 'register' && generateIdentifier()}
          items={[
            {
              key: 'login',
              label: '–í–æ–π—Ç–∏',
              children: (
                <Form form={loginForm} onFinish={handleLogin} layout="vertical">
                  <Form.Item name="username" label="–õ–æ–≥–∏–Ω" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω' }]}>
                    <Input />
                  </Form.Item>
                  <Form.Item name="password" label="–ü–∞—Ä–æ–ª—å" rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' }]}>
                    <Input.Password />
                  </Form.Item>
                  <Form.Item>
                    <Button type="primary" htmlType="submit" block>
                      –í–æ–π—Ç–∏
                    </Button>
                  </Form.Item>
                </Form>
              )
            },
            {
              key: 'register',
              label: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
              children: (
                <>
                  <div className="identifier-box">
                    ID: <strong>{identifier || '‚Äî'}</strong>
                    <Button onClick={generateIdentifier} size="small" style={{ marginLeft: '10px' }}>
                      üîÅ –û–±–Ω–æ–≤–∏—Ç—å ID
                    </Button>
                  </div>
                  <Form form={registerForm} onFinish={handleRegister} layout="vertical">
                    <Form.Item
                      name="nickname"
                      label="–ù–∏–∫–Ω–µ–π–º"
                      rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º' }]}
                    >
                      <Input />
                    </Form.Item>
                    <Form.Item
                      name="username"
                      label="–õ–æ–≥–∏–Ω"
                      rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω' }]}
                    >
                      <Input />
                    </Form.Item>
                    <Form.Item
                      name="password"
                      label="–ü–∞—Ä–æ–ª—å"
                      rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' }]}
                    >
                      <Input.Password />
                    </Form.Item>
                    <Form.Item
                      name="confirm"
                      label="–ü–æ–≤—Ç–æ—Ä –ø–∞—Ä–æ–ª—è"
                      dependencies={['password']}
                      rules={[
                        { required: true, message: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' },
                        ({ getFieldValue }) => ({
                          validator(_, value) {
                            return value === getFieldValue('password')
                              ? Promise.resolve()
                              : Promise.reject(new Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'));
                          }
                        })
                      ]}
                    >
                      <Input.Password />
                    </Form.Item>
                    <Form.Item>
                      <Button type="primary" htmlType="submit" block>
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                      </Button>
                    </Form.Item>
                  </Form>
                </>
              )
            }
          ]}
        />
      </div>
    </div>
  );
};

export default AuthPage;
