import React, { useEffect, useState } from 'react';
import { CryptoManager } from '../src/crypto/CryptoManager';

const RegisterFinalizeStep = ({ identifier, username, password, onSuccess }) => {
  const [status, setStatus] = useState('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π...');
  const [error, setError] = useState(null);

  useEffect(() => {
    const register = async () => {
      try {
        const crypto = new CryptoManager();
        const identityKeyPair = await crypto.generateIdentityKeyPair();
        const signedPreKey = await crypto.generateSignedPreKey(identityKeyPair.privateKey);
        const oneTimePreKeys = await crypto.generateOneTimePreKeys(5);
        const hashedPassword = await crypto.hashPassword(password);

        const payload = {
          username,
          password: hashedPassword,
          identifier,
          publicKey: identityKeyPair.publicKey,
          identityKey: identityKeyPair.publicKey,
          signedPreKey,
          oneTimePreKeys
        };

        setStatus('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        const res = await fetch('http://localhost:5001/api/auth/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await res.json();
        if (!res.ok) throw new Error(result.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');

        setStatus('üîê –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...');
        await crypto.storePrivateKey(identityKeyPair.privateKey, hashedPassword);
        localStorage.setItem('phantom_username', username);

        setStatus('‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥ –∫ —á–∞—Ç–∞–º...');
        onSuccess();
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
        setError(err.message);
        setStatus(null);
      }
    };

    register();
  }, []);

  return (
    <div>
      <h2>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
      {status && <p>{status}</p>}
      {error && <p style={{ color: 'red' }}>‚ùå {error}</p>}
    </div>
  );
};

export default RegisterFinalizeStep;